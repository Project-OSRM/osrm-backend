// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Error } from '../../../../osrm/engine/api/fbresult/error.js';
import { RouteObject } from '../../../../osrm/engine/api/fbresult/route-object.js';
import { TableResult } from '../../../../osrm/engine/api/fbresult/table-result.js';
import { Waypoint } from '../../../../osrm/engine/api/fbresult/waypoint.js';


export class FBResult {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FBResult {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFBResult(bb:flatbuffers.ByteBuffer, obj?:FBResult):FBResult {
  return (obj || new FBResult()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFBResult(bb:flatbuffers.ByteBuffer, obj?:FBResult):FBResult {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FBResult()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

error():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

code(obj?:Error):Error|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Error()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

dataVersion():string|null
dataVersion(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dataVersion(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

waypoints(index: number, obj?:Waypoint):Waypoint|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Waypoint()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

waypointsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

routes(index: number, obj?:RouteObject):RouteObject|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new RouteObject()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

routesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

table(obj?:TableResult):TableResult|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new TableResult()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static getFullyQualifiedName():string {
  return 'osrm.engine.api.fbresult.FBResult';
}

static startFBResult(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addError(builder:flatbuffers.Builder, error:boolean) {
  builder.addFieldInt8(0, +error, +false);
}

static addCode(builder:flatbuffers.Builder, codeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, codeOffset, 0);
}

static addDataVersion(builder:flatbuffers.Builder, dataVersionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, dataVersionOffset, 0);
}

static addWaypoints(builder:flatbuffers.Builder, waypointsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, waypointsOffset, 0);
}

static createWaypointsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startWaypointsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRoutes(builder:flatbuffers.Builder, routesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, routesOffset, 0);
}

static createRoutesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRoutesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTable(builder:flatbuffers.Builder, tableOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, tableOffset, 0);
}

static endFBResult(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishFBResultBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedFBResultBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

}
